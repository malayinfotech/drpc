// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: (devel)
// source: clientcompat.proto

package twirpcompat

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "drpc"
	drpcerr "drpc/drpcerr"
)

type drpcEncoding_File_clientcompat_proto struct{}

func (drpcEncoding_File_clientcompat_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_clientcompat_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_clientcompat_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_clientcompat_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_clientcompat_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCCompatServiceClient interface {
	DRPCConn() drpc.Conn

	Method(ctx context.Context, in *Req) (*Resp, error)
	NoopMethod(ctx context.Context, in *Empty) (*Empty, error)
}

type drpcCompatServiceClient struct {
	cc drpc.Conn
}

func NewDRPCCompatServiceClient(cc drpc.Conn) DRPCCompatServiceClient {
	return &drpcCompatServiceClient{cc}
}

func (c *drpcCompatServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcCompatServiceClient) Method(ctx context.Context, in *Req) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/compat.CompatService/Method", drpcEncoding_File_clientcompat_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcCompatServiceClient) NoopMethod(ctx context.Context, in *Empty) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/compat.CompatService/NoopMethod", drpcEncoding_File_clientcompat_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCCompatServiceServer interface {
	Method(context.Context, *Req) (*Resp, error)
	NoopMethod(context.Context, *Empty) (*Empty, error)
}

type DRPCCompatServiceUnimplementedServer struct{}

func (s *DRPCCompatServiceUnimplementedServer) Method(context.Context, *Req) (*Resp, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCCompatServiceUnimplementedServer) NoopMethod(context.Context, *Empty) (*Empty, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCCompatServiceDescription struct{}

func (DRPCCompatServiceDescription) NumMethods() int { return 2 }

func (DRPCCompatServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/compat.CompatService/Method", drpcEncoding_File_clientcompat_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCCompatServiceServer).
					Method(
						ctx,
						in1.(*Req),
					)
			}, DRPCCompatServiceServer.Method, true
	case 1:
		return "/compat.CompatService/NoopMethod", drpcEncoding_File_clientcompat_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCCompatServiceServer).
					NoopMethod(
						ctx,
						in1.(*Empty),
					)
			}, DRPCCompatServiceServer.NoopMethod, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterCompatService(mux drpc.Mux, impl DRPCCompatServiceServer) error {
	return mux.Register(impl, DRPCCompatServiceDescription{})
}

type DRPCCompatService_MethodStream interface {
	drpc.Stream
	SendAndClose(*Resp) error
}

type drpcCompatService_MethodStream struct {
	drpc.Stream
}

func (x *drpcCompatService_MethodStream) SendAndClose(m *Resp) error {
	if err := x.MsgSend(m, drpcEncoding_File_clientcompat_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCCompatService_NoopMethodStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
}

type drpcCompatService_NoopMethodStream struct {
	drpc.Stream
}

func (x *drpcCompatService_NoopMethodStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_clientcompat_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
